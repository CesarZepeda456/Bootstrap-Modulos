// app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { FormularioComponent } from './formulario.component';
import { ListadoComponent } from './listado.component';
import { ReactiveFormsModule } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { StoreModule } from '@ngrx/store';
import { votosReducer } from './votos.reducer';

const routes: Routes = [
  { path: '', redirectTo: 'formulario', pathMatch: 'full' },
  { path: 'formulario', component: FormularioComponent }
];

@NgModule({
  declarations: [AppComponent, FormularioComponent, ListadoComponent],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    RouterModule.forRoot(routes),
    StoreModule.forRoot({ votos: votosReducer })
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}


// app.component.ts
import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  template: `
    <router-outlet></router-outlet>
    <app-formulario (datosEnviados)="agregarElemento($event)"></app-formulario>
    <app-listado></app-listado>
  `
})
export class AppComponent {
  agregarElemento(datos: any) {
    console.log('Recibido:', datos);
  }
}


// formulario.component.ts
import { Component, Output, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-formulario',
  template: `
    <form [formGroup]="form" (ngSubmit)="enviar()">
      <input type="text" formControlName="nombre" placeholder="Nombre">
      <div *ngIf="hasError('nombre', 'required')">Nombre requerido</div>
      <div *ngIf="hasError('nombre', 'minLength')">M√≠nimo 3 caracteres</div>
      <input type="text" formControlName="edad" placeholder="Edad">
      <div *ngIf="hasError('edad', 'required')">Edad requerida</div>
      <button type="submit">Enviar</button>
    </form>
  `
})
export class FormularioComponent {
  @Output() datosEnviados = new EventEmitter<any>();
  form: FormGroup;
  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      nombre: ['', [Validators.required, this.minLengthValidator(3)]],
      edad: ['', Validators.required]
    });
  }

  minLengthValidator(min: number) {
    return (control: any) => control.value && control.value.length < min ? { minLength: true } : null;
  }

  enviar() {
    if (this.form.valid) this.datosEnviados.emit(this.form.value);
  }

  hasError(control: string, error: string) {
    return this.form.get(control)?.hasError(error);
  }
}


// listado.component.ts
import { Component } from '@angular/core';
import { Store } from '@ngrx/store';
import * as VotosActions from './votos.actions';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-listado',
  template: `
    <ul>
      <li *ngFor="let elem of elementos$ | async">
        {{ elem.nombre }} - üëç {{ elem.votosAFavor }} üëé {{ elem.votosEnContra }}
        <button (click)="votarPositivo(elem.nombre)">üëç</button>
        <button (click)="votarNegativo(elem.nombre)">üëé</button>
        <button (click)="borrar(elem.nombre)">üóëÔ∏è</button>
      </li>
    </ul>
  `
})
export class ListadoComponent {
  elementos$: Observable<any[]>;
  constructor(private store: Store<{ votos: any[] }>) {
    this.elementos$ = store.select('votos');
  }
  votarPositivo(nombre: string) { this.store.dispatch(VotosActions.votarAFavor({ nombre })); }
  votarNegativo(nombre: string) { this.store.dispatch(VotosActions.votarEnContra({ nombre })); }
  borrar(nombre: string) { this.store.dispatch(VotosActions.borrar({ nombre })); }
}


// votos.actions.ts
import { createAction, props } from '@ngrx/store';

export const agregar = createAction('[Votos] Agregar', props<{ nombre: string }>());
export const borrar = createAction('[Votos] Borrar', props<{ nombre: string }>());
export const votarAFavor = createAction('[Votos] Votar A Favor', props<{ nombre: string }>());
export const votarEnContra = createAction('[Votos] Votar En Contra', props<{ nombre: string }>());


// votos.reducer.ts
import { createReducer, on } from '@ngrx/store';
import * as VotosActions from './votos.actions';

export interface Elemento {
  nombre: string;
  votosAFavor: number;
  votosEnContra: number;
}

export const initialState: Elemento[] = [];

export const votosReducer = createReducer(
  initialState,
  on(VotosActions.agregar, (state, { nombre }) => [...state, { nombre, votosAFavor: 0, votosEnContra: 0 }]),
  on(VotosActions.borrar, (state, { nombre }) => state.filter(e => e.nombre !== nombre)),
  on(VotosActions.votarAFavor, (state, { nombre }) =>
    state.map(e => e.nombre === nombre ? { ...e, votosAFavor: e.votosAFavor + 1 } : e)
  ),
  on(VotosActions.votarEnContra, (state, { nombre }) =>
    state.map(e => e.nombre === nombre ? { ...e, votosEnContra: e.votosEnContra + 1 } : e)
  )
);

